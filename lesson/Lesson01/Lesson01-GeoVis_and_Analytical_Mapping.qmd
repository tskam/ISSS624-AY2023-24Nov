---
title: 'Lesson 1: <br/>GeoVisualisation and Analytical Mapping: <br/>tmap Methods'
subtitle: ""
author: "Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)"
institute: "School of Computing and Information Systems,<br/>Singapore Management University"
date: "13 Nov, 2023"
date-modified: "last-modified"
format: 
  revealjs:
    width: 1600
    height: 900
    show-notes: false
    slide-number: true
    show-slide-number: all
date-format: "DD MMM YYYY"    
editor: visual
---

## Content

::: {style="font-size: 0.9em"}
-   Choropleth Mapping with in R
    -   Type of choropleth map
    -   Choosing number of classes
    -   Data classification methods
    -   Selecting colour scheme
-   tmap Methods
    -   tmap framewok
    -   tmap elements
    -   tmap layers
    -   tmap layout
    -   tmap style
    -   tmap facet
:::

::: notes
This lesson consists of two parts. First, I will share with you the concepts and design principles of choropleth maps. Next, I will introduce you to tmap, an R package specially designed for thematic mapping based on Layered Grammar of Graphics
:::

## Choropleth Map

A choropleth map is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population or per-capita income.

![](img/image3-1.png)

------------------------------------------------------------------------

### Classified choropleth map

-   Choropleth maps can be either classified or unclassified.
-   A classed choropleth map combines areal units into a smaller number of groups. Interval levels may vary, but typically 4 to 7 are used in a map. There is different classification techniques used to divide up the intervals.

![](img/image3-8.jpg)

------------------------------------------------------------------------

### Unclassified choropleth map

-   Unclassed choropleth maps are similar to classed choropleth maps; however, unclassed choropleth maps do not have an averaged statistic towards each particular colour.

![](img/image3-7.jpg)

------------------------------------------------------------------------

### Choosing an appropriate number of classes

![](img/image3-9.jpg)

::: notes
The more classes you use, the less data generalization (which is good), but this comes at the expense of legibility and the associated risk of map reading errors since more colors are harder to see and print reliably (which is bad). The key question is how much generalization do you want? A map with 3 classes/colors (e.g., low, medium, high) will be easy to see and remember, but may gloss over some very important aspects of the data and create artificial geographic patterns by lumping together many places that are in fact quite different. There is no ideal number of classes for a map, so experiment.
:::

## Data classification

![](img/image3-10.png)

::: notes
Not sure how many classes to use? Have a look at the distribution of your data in a histogram (see examples below): Are there obvious clusters within your data? Are there large gaps in your data range that suggest nice compact data classes? If so, pick that number of classes and place those class breaks around those clusters.
:::

------------------------------------------------------------------------

### Methods of choosing classes

-   Based on the nature of the distribution
    -   quantile, equal interval, natural breaks, standard deviations, defined interval
-   Arbitrary
    -   Can be based on round numbers.
    -   Examples: Grouping according to age or census housing categories
    -   Can result in empty categories

------------------------------------------------------------------------

### Data classification method: Quantile

-   Same number of features per class.

![](img/image3-11a.jpg){fig-align="center"}

------------------------------------------------------------------------

### Data classification method: Equal interval

::: columns
::: {.column width="70%"}
-   Divides the range of attribute values into equally sized classes.

![](img/image3-11b.jpg){width="900"}
:::

::: {.column width="30%"}
::: callout-caution
### Caution

Avoid equal interval if your data are skewed to one end or if you have one or two really large outlier values. Outliers in that case will likely produce empty classes, wasting perfectly good classes with no observations in them. Since the hotel data above doesn't have really large outliers, this is a data distribution that works well with equal interval.
:::
:::
:::

------------------------------------------------------------------------

### Data classification method: Jenks (also known as Natural breaks)

-   Default Jenk's statistical optimization
-   Finds natural groupings in the data

![](img/image3-11c.jpg)

------------------------------------------------------------------------

### Data classification: Standard deviation

-   A measure of dispersion.
-   Use if the distribution approximates a normal distribution (bell-shaped curve)

![](img/image3-11d.jpg)

## Colour scheme

[ColorBrewer](http://colorbrewer2.org/)

::: columns
::: {.column width="50%"}
![](img/image3-12a.jpg)
:::

::: {.column widht="50%"}
![](img/image3-12b.jpeg)
:::
:::

## Mapping packages in R

::: columns
::: {.column width="50%"}
### Selected popular mapping packages

[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html)

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)
-   [mapsf](https://riatelab.github.io/mapsf/index.html)
-   [leaflet](https://cran.r-project.org/web/packages/leaflet/index.html)
-   [ggplot2](https://ggplot2.tidyverse.org/index.html). Read [Chapter 6: Maps](https://ggplot2-book.org/maps.html) of 'ggplot2: Elegant Graphics for Data Analysis' for more detail.
-   [ggmap](https://cran.r-project.org/web/packages/ggmap/index.html)
-   [quickmapr](https://cran.r-project.org/web/packages/quickmapr/index.html)
-   [mapview](https://cran.r-project.org/web/packages/mapview/index.html)
:::

::: {.column width="50%"}
### Other packages

-   [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/index.html)
-   [classInt](https://cran.r-project.org/web/packages/classInt/index.html)
:::
:::

## Introducing **tmap**

::: columns
::: {.column width="50%"}
-   [**tmap**](https://r-tmap.github.io/tmap/index.html) is a R package specially designed for creating thematic maps using the pricinples of the **Grammar of Graphics**.
-   It offers a flexible, layer-based, and easy to use approach to create thematic maps, such as choropleths and proportional symbol maps.
-   It supports two modes: *plot*(static maps) and *view* (interactive maps).
-   It provides shiny integration(with *tmapOutput* and *renderTmap*).
:::

::: {.column width="50%"}
![](img/image3-2.jpg)
:::
:::

------------------------------------------------------------------------

### Shape objects

-   *tmap* supports **simple features** from the new *sf* package.
-   It also supports the class Spatial and Raster, respectively from the *sp* and the *raster* package. The supported subclasses are:

![](img/image3-3.jpg)

```{r}
#| echo: false
pacman::p_load(sf, tmap, tidyverse)
```

```{r}
#| echo: false
mpszpop2020 <- read_rds("data/rds/mpszpop2020.rds")
```

------------------------------------------------------------------------

### Plotting functions of **tmap**

Two approaches can be used to prepare thematic map using **tmap**, they are:

-   Plotting a thematic map quickly by using `qtm()`.

-   Plotting highly customisable thematic map by using tmap elements.

------------------------------------------------------------------------

### Plotting a choropleth map quickly by using `qtm()`

::: columns
::: {.column width="50%"}
The easiest and quickest to draw a choropleth map using **tmap** is using `qtm()`. It is concise and provides a good default visualisation in many cases.

-   `tmap_mode()` with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   `fill` argument is used to map the attribute (i.e. DEPENDENCY)
:::

::: {.column width="50%"}
::: {style="font-size: 1.2em"}
```{r}
#| echo: true
tmap_mode("plot")
qtm(mpszpop2020, 
    fill = "DEPENDENCY")
```
:::
:::
:::

## **tmap** elements

### `tm_shape()`

-   The first element to start with is [`tm_shape()`](https://r-tmap.github.io/tmap/reference/tm_shape.html), which specifies the shape object.

![](img/image3-4.jpg){fig-align="center" width="450"}

## **tmap** elements

### Base layers

-   Next, one, or a combination of the following drawing layers should be specified:

![](img/image3-5.jpg)

-   Links to [`tm_polygons()`](https://r-tmap.github.io/tmap/reference/tm_polygons.html), [`tm_symbols()`](https://r-tmap.github.io/tmap/reference/tm_symbols.html), [`tm_lines()`](https://r-tmap.github.io/tmap/reference/tm_lines.html), [`tm_raster()`](https://r-tmap.github.io/tmap/reference/tm_raster.html) and [`tm_text()`](https://r-tmap.github.io/tmap/reference/tm_text.html)

## **tmap** elements

### Base layers

-   Each of these functions specifies the geometry, mapping, and scaling component of the LGTM.
-   An aesthetic can take a constant value, a data variable name, or a vector consisting of values or variable names.
-   If a data variable is provided, the scale is automatically configured according to the values of this variable, but can be adjusted with several arguments. For instance, the main scaling arguments for a color aesthetic are color palette, the preferred number of classes, and a style to create classes.
-   Also, for each aesthetic, except for the text labels, a legend is automatically created.
-   If a vector of variable names is provided, small multiples are created, which will be explained further below.

## **tmap** elements

### Derived layers

::: columns
::: {.column width="40%"}
Each aesthetic can take a constant value or a data variable name. For instance, `tm_fill(col="blue")` colors all polygons blue, while `tm_fill(col="var1")`, where "var1" is the name of a data variable in the shape object, creates a choropleth.
:::

::: {.column width="60%"}
The supported derived layers are as follows:

![](img/image3-6.jpg)
:::
:::

## Reference

### Principles, Concepts and Methods of Choropleth Maps Design

**Core Reading**

-   [Choropleth Maps](https://www.axismaps.com/guide/univariate/choropleth/)
-   [The Basics of Data Classification](https://www.axismaps.com/guide/data/data-classification/)

**Additional Readings**

-   [Choropleth Maps -- A Guide to Data Classification](https://gisgeography.com/choropleth-maps-data-classification/)
-   [Bivariate Choropleth](https://www.axismaps.com/guide/multivariate/bivariate-choropleth/)
-   [Value-by-alpha maps](http://andywoodruff.com/blog/value-by-alpha-maps/)
-   [What to consider when creating choropleth maps](https://blog.datawrapper.de/choroplethmaps/)
-   [Choropleth Mapping with Exploratory Data Analysis](https://www.directionsmag.com/article/3363)

## References

### All About **tmap** package

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [Development site](https://github.com/mtennekes/tmap)

-   [tmap Reference](https://r-tmap.github.io/tmap/reference/index.html)

-   [tmap: get started!](https://r-tmap.github.io/tmap/articles/tmap-getstarted.html)

-   [tmap: version changes](https://r-tmap.github.io/tmap/articles/tmap-changes.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](https://mtennekes.github.io/downloads/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](https://mtennekes.github.io/downloads/presentations/tmap_user2017.pdf)

```{r}
#| eval: false
#| echo: false

renderthis::to_pdf(from = "https://is415-ay2022-23t2.netlify.app/lesson/Lesson03/Lesson03-Thematic_and_Analytical_Mapping.html",
                   to = "../../_site/lesson/Lesson03/Lesson03-Thematic_and_Analytical_Mapping.pdf")
```
